{"name": "test_start[autotest5]", "status": "failed", "statusDetails": {"message": "AssertionError: assert False\n +  where False = assert_handle({'code': '200', 'data': [], 'msg': 'success'}, '{\\n    \"code\": \"200\",\\n    \"data\": [\\n        {\\n            \"botName\": \"lena_de_new\",\\n            \"dataType\": \"Scri... \"0x297\",\\n            \"scriptCount\": 2,\\n            \"version\": \"1.0.0.1\"\\n        }\\n    ],\\n    \"msg\": \"success\"\\n}', 'json')", "trace": "self = <test_01.Testdata object at 0x042DA990>\nautotest = {'Actual': '', 'Auth': '', 'Automated': 'Yes', 'CASE_NO_ID': 'test_fact_006', ...}\nwrite_book = <tools.ExcelHandle.ExcelHandle object at 0x049B8F50>\n\n    def test_start(self,autotest,write_book):\n    \n        if autotest.get('row', None):\n            response  = RequestHandle(autotest).get_response()\n            actual_result = response.json()\n            row = autotest['row']\n            result = 'Pass'\n            try:\n                assert assert_handle(actual_result,autotest['Expect'],autotest['Validate_Type'])\n            except Exception as e:\n                result = 'Fail'\n                raise AssertionError(e)\n            finally:\n                write_book.write_back_result(row,str(actual_result),result)\n        else:\n            act_data = autotest['steps']\n            for autotest in act_data:\n                response = RequestHandle(autotest).get_response()\n                row = autotest['row']\n                result = 'Pass'\n                actual_result = None\n                if response:\n                    actual_result = response.json()\n                    try:\n>                       assert assert_handle(actual_result, autotest['Expect'], autotest['Validate_Type'])\nE                       AssertionError: assert False\nE                        +  where False = assert_handle({'code': '200', 'data': [], 'msg': 'success'}, '{\\n    \"code\": \"200\",\\n    \"data\": [\\n        {\\n            \"botName\": \"lena_de_new\",\\n            \"dataType\": \"Scri... \"0x297\",\\n            \"scriptCount\": 2,\\n            \"version\": \"1.0.0.1\"\\n        }\\n    ],\\n    \"msg\": \"success\"\\n}', 'json')\n\ntests\\test_01.py:40: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_01.Testdata object at 0x042DA990>\nautotest = {'Actual': '', 'Auth': '', 'Automated': 'Yes', 'CASE_NO_ID': 'test_fact_006', ...}\nwrite_book = <tools.ExcelHandle.ExcelHandle object at 0x049B8F50>\n\n    def test_start(self,autotest,write_book):\n    \n        if autotest.get('row', None):\n            response  = RequestHandle(autotest).get_response()\n            actual_result = response.json()\n            row = autotest['row']\n            result = 'Pass'\n            try:\n                assert assert_handle(actual_result,autotest['Expect'],autotest['Validate_Type'])\n            except Exception as e:\n                result = 'Fail'\n                raise AssertionError(e)\n            finally:\n                write_book.write_back_result(row,str(actual_result),result)\n        else:\n            act_data = autotest['steps']\n            for autotest in act_data:\n                response = RequestHandle(autotest).get_response()\n                row = autotest['row']\n                result = 'Pass'\n                actual_result = None\n                if response:\n                    actual_result = response.json()\n                    try:\n                        assert assert_handle(actual_result, autotest['Expect'], autotest['Validate_Type'])\n                    except Exception as e:\n                        result = 'Fail'\n>                       raise AssertionError(e)\nE                       AssertionError: assert False\nE                        +  where False = assert_handle({'code': '200', 'data': [], 'msg': 'success'}, '{\\n    \"code\": \"200\",\\n    \"data\": [\\n        {\\n            \"botName\": \"lena_de_new\",\\n            \"dataType\": \"Scri... \"0x297\",\\n            \"scriptCount\": 2,\\n            \"version\": \"1.0.0.1\"\\n        }\\n    ],\\n    \"msg\": \"success\"\\n}', 'json')\n\ntests\\test_01.py:43: AssertionError"}, "parameters": [{"name": "autotest", "value": "{'project_name': 'scello', 'file_name': 'scello.xlsx', 'sheet_name': 'Sheet1', 'steps': [{'row': 13, 'botActId': 'test636988', 'CASE_NO_ID': 'test_fact_006', 'Description': '调取版本话术库列表', 'Priority': 'P1', 'Component': 'KGMS', 'Automated': 'Yes', 'Steps': 'Step1', 'Headers': '{\"Content-Type\": \"application/json\"}', 'Method': 'GET', 'Auth': '', 'Payload': '', 'URL': '/editor/show/version/lena_de_new?botDataSetId=0x293', 'Validate_Type': 'json', 'Expect': '{\\n    \"code\": \"200\",\\n    \"data\": [\\n        {\\n            \"botName\": \"lena_de_new\",\\n            \"dataType\": \"Script\",\\n            \"desc\": \"dmeditor.sql\",\\n            \"operator\": \"bot_creator\",\\n            \"releaseTime\": \"2020-09-03 16:10:25\",\\n            \"resourceId\": \"0x2ce\",\\n            \"scriptCount\": 1,\\n            \"version\": \"1.0.0.13\"\\n        },\\n        {\\n            \"botName\": \"lena_de_new\",\\n            \"dataType\": \"Script\",\\n            \"desc\": \"dmeditor.sql\",\\n            \"operator\": \"bot_creator\",\\n            \"releaseTime\": \"2020-09-03 16:10:25\",\\n            \"resourceId\": \"0x2d2\",\\n            \"scriptCount\": 2,\\n            \"version\": \"1.0.0.14\"\\n        },\\n        {\\n            \"botName\": \"lena_de_new\",\\n            \"dataType\": \"Script\",\\n            \"desc\": \"dmeditor.sql\",\\n            \"operator\": \"bot_creator\",\\n            \"releaseTime\": \"2020-09-03 14:46:29\",\\n            \"resourceId\": \"0x2cb\",\\n            \"scriptCount\": 2,\\n            \"version\": \"1.0.0.12\"\\n        },\\n        {\\n            \"botName\": \"lena_de_new\",\\n            \"dataType\": \"Script\",\\n            \"desc\": \"dmeditor.sql\",\\n            \"operator\": \"bot_creator\",\\n            \"releaseTime\": \"2020-09-03 14:20:32\",\\n            \"resourceId\": \"0x2c6\",\\n            \"scriptCount\": 6,\\n            \"version\": \"1.0.0.11\"\\n        },\\n        {\\n            \"botName\": \"lena_de_new\",\\n            \"dataType\": \"Script\",\\n            \"desc\": \"dmeditor.sql\",\\n            \"operator\": \"bot_creator\",\\n            \"releaseTime\": \"2020-09-03 13:55:14\",\\n            \"resourceId\": \"0x2c3\",\\n            \"scriptCount\": 6,\\n            \"version\": \"1.0.0.10\"\\n        },\\n        {\\n            \"botName\": \"lena_de_new\",\\n            \"dataType\": \"Script\",\\n            \"desc\": \"dmeditor.sql\",\\n            \"operator\": \"bot_creator\",\\n            \"releaseTime\": \"2020-09-03 13:53:43\",\\n            \"resourceId\": \"0x2bf\",\\n            \"scriptCount\": 5,\\n            \"version\": \"1.0.0.9\"\\n        },\\n        {\\n            \"botName\": \"lena_de_new\",\\n            \"dataType\": \"Script\",\\n            \"desc\": \"dmeditor.sql\",\\n            \"operator\": \"bot_creator\",\\n            \"releaseTime\": \"2020-09-03 13:52:53\",\\n            \"resourceId\": \"0x2bb\",\\n            \"scriptCount\": 1,\\n            \"version\": \"1.0.0.8\"\\n        },\\n        {\\n            \"botName\": \"lena_de_new\",\\n            \"dataType\": \"Script\",\\n            \"desc\": \"dmeditor.sql\",\\n            \"operator\": \"bot_creator\",\\n            \"releaseTime\": \"2020-09-03 13:36:59\",\\n            \"resourceId\": \"0x2b8\",\\n            \"scriptCount\": 1,\\n            \"version\": \"1.0.0.7\"\\n        },\\n        {\\n            \"botName\": \"lena_de_new\",\\n            \"dataType\": \"Script\",\\n            \"desc\": \"dmeditor.sql\",\\n            \"operator\": \"bot_creator\",\\n            \"releaseTime\": \"2020-09-03 13:36:51\",\\n            \"resourceId\": \"0x2b5\",\\n            \"scriptCount\": 1,\\n            \"version\": \"1.0.0.6\"\\n        },\\n        {\\n            \"botName\": \"lena_de_new\",\\n            \"dataType\": \"Script\",\\n            \"desc\": \"dmeditor.sql\",\\n            \"operator\": \"bot_creator\",\\n            \"releaseTime\": \"2020-09-03 13:36:43\",\\n            \"resourceId\": \"0x2b1\",\\n            \"scriptCount\": 0,\\n            \"version\": \"1.0.0.5\"\\n        },\\n        {\\n            \"botName\": \"lena_de_new\",\\n            \"dataType\": \"Script\",\\n            \"desc\": \"dmeditor.sql\",\\n            \"operator\": \"bot_creator\",\\n            \"releaseTime\": \"2020-09-03 13:32:48\",\\n            \"resourceId\": \"0x2ad\",\\n            \"scriptCount\": 2,\\n            \"version\": \"1.0.0.4\"\\n        },\\n        {\\n            \"botName\": \"lena_de_new\",\\n            \"dataType\": \"Script\",\\n            \"desc\": \"dmeditor.sql\",\\n            \"operator\": \"bot_creator\",\\n            \"releaseTime\": \"2020-09-03 11:19:34\",\\n            \"resourceId\": \"0x2aa\",\\n            \"scriptCount\": 2,\\n            \"version\": \"1.0.0.3\"\\n        },\\n        {\\n            \"botName\": \"lena_de_new\",\\n            \"dataType\": \"Script\",\\n            \"desc\": \"dmeditor.sql\",\\n            \"operator\": \"bot_creator\",\\n            \"releaseTime\": \"2020-09-03 11:19:14\",\\n            \"resourceId\": \"0x2a7\",\\n            \"scriptCount\": 2,\\n            \"version\": \"1.0.0.2\"\\n        },\\n        {\\n            \"botName\": \"lena_de_new\",\\n            \"dataType\": \"Script\",\\n            \"desc\": \"dmeditor.sql\",\\n            \"operator\": \"bot_creator\",\\n            \"releaseTime\": \"2020-09-03 11:12:30\",\\n            \"resourceId\": \"0x297\",\\n            \"scriptCount\": 2,\\n            \"version\": \"1.0.0.1\"\\n        }\\n    ],\\n    \"msg\": \"success\"\\n}', 'Actual': ''}], 'botActId': 'test636988'}"}], "start": 1600227109069, "stop": 1600227109139, "uuid": "46ed6e53-12a2-476f-a8ba-8053d30e1b52", "historyId": "3be4e126d63f11ffd2b0bd401a1b4779", "testCaseId": "68de03e34e38ed87d9781455db5f577a", "fullName": "tests.test_01.Testdata#test_start", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_01"}, {"name": "subSuite", "value": "Testdata"}, {"name": "host", "value": "wx0liucy"}, {"name": "thread", "value": "10888-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_01"}]}