{"name": "test_start[autotest2]", "status": "failed", "statusDetails": {"message": "AssertionError: Expecting value: line 1 column 1 (char 0)", "trace": "self = <test_api.Testdata object at 0x05A6E710>\nautotest = {'botActId': 'test973526', 'file_name': 'scello.xlsx', 'project_name': 'scello', 'sheet_name': 'Sheet1', ...}\nwrite_book = <tools.ExcelHandle.ExcelHandle object at 0x05A5B310>\nenv_data = ('10.110.152.171', '9108')\n\n    def test_start(self,autotest,write_book,env_data):\n    \n        act_data = autotest['steps']\n        global global_data\n        for data in act_data:\n            row = data['row']\n            result = 'Pass'\n            actual_result = None\n            try:\n                response = RequestHandle(data,env_data,global_data,autotest['project_name']).get_response()\n>               actual_result = response.json()\n\ntests\\test_api.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [404]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises ValueError: If the response body does not contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using chardet to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(\n                        self.content.decode(encoding), **kwargs\n                    )\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n>       return complexjson.loads(self.text, **kwargs)\n\nE:\\Python37\\lib\\site-packages\\requests\\models.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = '<html>\\r\\n<head><title>404 Not Found</title></head>\\r\\n<body>\\r\\n<center><h1>404 Not Found</h1></center>\\r\\n<hr><center>nginx/1.16.1</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nencoding = None, cls = None, object_hook = None, parse_float = None\nparse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, encoding=None, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        The ``encoding`` argument is ignored and deprecated.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\nE:\\Python37\\lib\\json\\__init__.py:348: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x046571D0>\ns = '<html>\\r\\n<head><title>404 Not Found</title></head>\\r\\n<body>\\r\\n<center><h1>404 Not Found</h1></center>\\r\\n<hr><center>nginx/1.16.1</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n_w = <built-in method match of re.Pattern object at 0x04573650>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\nE:\\Python37\\lib\\json\\decoder.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x046571D0>\ns = '<html>\\r\\n<head><title>404 Not Found</title></head>\\r\\n<body>\\r\\n<center><h1>404 Not Found</h1></center>\\r\\n<hr><center>nginx/1.16.1</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nE:\\Python37\\lib\\json\\decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_api.Testdata object at 0x05A6E710>\nautotest = {'botActId': 'test973526', 'file_name': 'scello.xlsx', 'project_name': 'scello', 'sheet_name': 'Sheet1', ...}\nwrite_book = <tools.ExcelHandle.ExcelHandle object at 0x05A5B310>\nenv_data = ('10.110.152.171', '9108')\n\n    def test_start(self,autotest,write_book,env_data):\n    \n        act_data = autotest['steps']\n        global global_data\n        for data in act_data:\n            row = data['row']\n            result = 'Pass'\n            actual_result = None\n            try:\n                response = RequestHandle(data,env_data,global_data,autotest['project_name']).get_response()\n                actual_result = response.json()\n                if jsonpath.jsonpath(actual_result,'$..botId'):\n                    global_data = jsonpath.jsonpath(actual_result,'$..botId')[0]\n                assert assert_handle(actual_result, data['Expect'], data['Validate_Type'])\n            except Exception as e:\n                result = 'Fail'\n>               raise AssertionError(e)\nE               AssertionError: Expecting value: line 1 column 1 (char 0)\n\ntests\\test_api.py:34: AssertionError"}, "parameters": [{"name": "autotest", "value": "{'project_name': 'scello', 'file_name': 'scello.xlsx', 'sheet_name': 'Sheet1', 'steps': [{'row': 6, 'botActId': 'test973526', 'CASE_NO_ID': 'test_fact_003', 'Description': '增加数据', 'Priority': 'P1', 'Component': 'KGMS', 'Automated': 'Yes', 'Steps': 'Step1', 'Headers': '{\"Content-Type\": \"application/json\"}', 'Method': 'POST', 'Auth': '', 'Payload': '[\\n    {\\n        \"botActId\": \"{botActId}\",\\n        \"categoryName\": \"Asking Information\",\\n        \"usage\": 0,\\n        \"scriptExample\": \"{\\\\\"question\\\\\":\\\\\"how are you?\\\\\",\\\\\"answer\\\\\":\\\\\" I am fine\\\\\",\\\\\"imgUrl\\\\\":[]}\",\\n        \"description\": \"\",\\n        \"scriptType\": 1,\\n        \"scriptValue\": \"test\",\\n        \"scriptFeature\": {\\n            \"language\": [\\n                \"English\"\\n            ]\\n        }\\n    }\\n]', 'URL': '/editor/script/save/lena_de', 'Validate_Type': 'status_code', 'Expect': 200.0, 'Actual': ''}, {'row': 7, 'botActId': 'test973526', 'CASE_NO_ID': 'test_fact_003', 'Description': '根据条件查询', 'Priority': 'P1', 'Component': 'KGMS', 'Automated': 'Yes', 'Steps': 'Step2', 'Headers': '{\"Content-Type\": \"application/json\"}', 'Method': 'POST', 'Auth': '', 'Payload': '{\"scriptType\": 1}', 'URL': '/editor/script/condition/lena_de', 'Validate_Type': 'status_code', 'Expect': 200.0, 'Actual': ''}, {'row': 8, 'botActId': 'test973526', 'CASE_NO_ID': 'test_fact_003', 'Description': '多条件查询', 'Priority': 'P1', 'Component': 'KGMS', 'Automated': 'Yes', 'Steps': 'Step2', 'Headers': '{\"Content-Type\": \"application/json\"}', 'Method': 'POST', 'Auth': '', 'Payload': '{\"scriptValue\": \"test\",\"scriptType\": 1}', 'URL': '/editor/script/condition/lena_de', 'Validate_Type': 'status_code', 'Expect': 200.0, 'Actual': ''}], 'botActId': 'test973526'}"}], "start": 1607502266208, "stop": 1607502266246, "uuid": "32c6e8aa-089c-4208-b34b-312c78d3540f", "historyId": "fb23dca7ebb7c09f4a767f73c2933690", "testCaseId": "fbabcc0c9c11e4ecfbc092daf7d5aadf", "fullName": "tests.test_api.Testdata#test_start", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_api"}, {"name": "subSuite", "value": "Testdata"}, {"name": "host", "value": "wx0liucy"}, {"name": "thread", "value": "11508-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api"}]}