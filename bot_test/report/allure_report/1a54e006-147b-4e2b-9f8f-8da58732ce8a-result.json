{"name": "test_start[autotest1]", "status": "failed", "statusDetails": {"message": "AssertionError: assert False\n +  where False = assert_handle({'info': 'Sub flow execute error', 'requestId': '922ac6ecd4624fb28111', 'status': 60002}, 'Request Success', 'in')", "trace": "self = <test_api.Testdata object at 0x05049ED0>\nautotest = {'Actual': '', 'Auth': '', 'Automated': 'Yes', 'CASE_NO_ID': 'test_fact_002', ...}\nwrite_book = <tools.ExcelHandle.ExcelHandle object at 0x04CD5790>\nenv_data = ('10.110.147.242', '9003')\n\n    def test_start(self,autotest,write_book,env_data):\n        act_data = autotest['steps']\n        global global_data\n        for autotest in act_data:\n            row = autotest['row']\n            result = 'Pass'\n            actual_result = None\n            try:\n                response = RequestHandle(autotest,env_data,global_data).get_response()\n                actual_result = response.json()\n                # print(actual_result)\n                if jsonpath.jsonpath(actual_result,'$..botId'):\n                    global_data = jsonpath.jsonpath(actual_result,'$..botId')[0]\n>               assert assert_handle(actual_result, autotest['Expect'], autotest['Validate_Type'])\nE               AssertionError: assert False\nE                +  where False = assert_handle({'info': 'Sub flow execute error', 'requestId': '922ac6ecd4624fb28111', 'status': 60002}, 'Request Success', 'in')\n\ntests\\test_api.py:32: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_api.Testdata object at 0x05049ED0>\nautotest = {'Actual': '', 'Auth': '', 'Automated': 'Yes', 'CASE_NO_ID': 'test_fact_002', ...}\nwrite_book = <tools.ExcelHandle.ExcelHandle object at 0x04CD5790>\nenv_data = ('10.110.147.242', '9003')\n\n    def test_start(self,autotest,write_book,env_data):\n        act_data = autotest['steps']\n        global global_data\n        for autotest in act_data:\n            row = autotest['row']\n            result = 'Pass'\n            actual_result = None\n            try:\n                response = RequestHandle(autotest,env_data,global_data).get_response()\n                actual_result = response.json()\n                # print(actual_result)\n                if jsonpath.jsonpath(actual_result,'$..botId'):\n                    global_data = jsonpath.jsonpath(actual_result,'$..botId')[0]\n                assert assert_handle(actual_result, autotest['Expect'], autotest['Validate_Type'])\n            except Exception as e:\n                result = 'Fail'\n                # log.critical(e)\n>               raise AssertionError(e)\nE               AssertionError: assert False\nE                +  where False = assert_handle({'info': 'Sub flow execute error', 'requestId': '922ac6ecd4624fb28111', 'status': 60002}, 'Request Success', 'in')\n\ntests\\test_api.py:36: AssertionError"}, "parameters": [{"name": "autotest", "value": "{'project_name': 'pipeline', 'file_name': 'pipeline.xlsx', 'sheet_name': 'Sheet1', 'steps': [{'row': 2, 'botActId': 'test292336', 'CASE_NO_ID': 'test_fact_002', 'Description': '通过串行模式请求\\n', 'Priority': 'P1', 'Component': 'KGMS', 'Automated': 'Yes', 'Steps': 'Step1', 'Headers': '{\"Content-Type\": \"application/json\"}', 'Method': 'POST', 'Auth': '', 'Payload': '{\\n    \"appId\":\"parallel\",\\n    \"businessType\":\"chatbot\",\\n    \"timestamp\":\"1597903507793\",\\n    \"requestId\":\"922ac6ecd4624fb28111\",\\n    \"params\":{\\n        \"chnl\":\"pc\",\\n        \"chnlUsrId\":\"1300126178996\",\\n        \"geo\":\"IN\",\\n        \"lan\":\"en\",\\n        \"location\":\"India\",\\n        \"query\":{\\n            \"id\":\"20082014050777111\",\\n            \"msg\":\"hello \",\\n            \"type\":\"text\"\\n        },\\n        \"serviceId\":\"922ac6ecd4624fb2811a5ccbc443e65f\",\\n        \"turnId\":\"121f7a73480646799d1c9b2ae0a847d1\",\\n        \"context\":null,\\n        \"feedback\":null\\n    }\\n}', 'URL': '/nlu-pipeline/api/v1/semantic/understand', 'Validate_Type': 'in', 'Expect': 'Request Success', 'Actual': ''}], 'botActId': 'test292336'}"}], "start": 1604560156515, "stop": 1604560156545, "uuid": "d4201209-30e2-4535-8cb3-6d5694d08568", "historyId": "c8152495cb1f17a22fdc78500ba9a736", "testCaseId": "fbabcc0c9c11e4ecfbc092daf7d5aadf", "fullName": "tests.test_api.Testdata#test_start", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_api"}, {"name": "subSuite", "value": "Testdata"}, {"name": "host", "value": "wx0liucy"}, {"name": "thread", "value": "8828-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api"}]}