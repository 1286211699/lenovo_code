{"name": "test_start[autotest4]", "status": "failed", "statusDetails": {"message": "AssertionError: assert False\n +  where False = assert_handle({'data': None, 'duration': 0, 'msg': 'parameter typeId : typeId为空', 'status': 400}, 200.0, 'status_code')", "trace": "self = <test_api.Testdata object at 0x05C8B8F0>\nautotest = {'botActId': 'test302857', 'file_name': 'pranbo.xlsx', 'project_name': 'pranbo', 'sheet_name': 'Sheet1', ...}\nwrite_book = <tools.ExcelHandle.ExcelHandle object at 0x05C9E5B0>\nenv_data = ('10.110.152.171', '30081')\n\n    def test_start(self,autotest,write_book,env_data):\n    \n        act_data = autotest['steps']\n        global global_data\n        for data in act_data:\n            row = data['row']\n            result = 'Pass'\n            actual_result = None\n            try:\n                response = RequestHandle(data,env_data,global_data,autotest['project_name']).get_response()\n                actual_result = response.json()\n                if jsonpath.jsonpath(actual_result,'$..botId'):\n                    global_data = jsonpath.jsonpath(actual_result,'$..botId')[0]\n>               assert assert_handle(actual_result, data['Expect'], data['Validate_Type'])\nE               AssertionError: assert False\nE                +  where False = assert_handle({'data': None, 'duration': 0, 'msg': 'parameter typeId : typeId为空', 'status': 400}, 200.0, 'status_code')\n\ntests\\test_api.py:31: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_api.Testdata object at 0x05C8B8F0>\nautotest = {'botActId': 'test302857', 'file_name': 'pranbo.xlsx', 'project_name': 'pranbo', 'sheet_name': 'Sheet1', ...}\nwrite_book = <tools.ExcelHandle.ExcelHandle object at 0x05C9E5B0>\nenv_data = ('10.110.152.171', '30081')\n\n    def test_start(self,autotest,write_book,env_data):\n    \n        act_data = autotest['steps']\n        global global_data\n        for data in act_data:\n            row = data['row']\n            result = 'Pass'\n            actual_result = None\n            try:\n                response = RequestHandle(data,env_data,global_data,autotest['project_name']).get_response()\n                actual_result = response.json()\n                if jsonpath.jsonpath(actual_result,'$..botId'):\n                    global_data = jsonpath.jsonpath(actual_result,'$..botId')[0]\n                assert assert_handle(actual_result, data['Expect'], data['Validate_Type'])\n            except Exception as e:\n                result = 'Fail'\n>               raise AssertionError(e)\nE               AssertionError: assert False\nE                +  where False = assert_handle({'data': None, 'duration': 0, 'msg': 'parameter typeId : typeId为空', 'status': 400}, 200.0, 'status_code')\n\ntests\\test_api.py:34: AssertionError"}, "parameters": [{"name": "autotest", "value": "{'project_name': 'pranbo', 'file_name': 'pranbo.xlsx', 'sheet_name': 'Sheet1', 'steps': [{'row': 6, 'botActId': 'test302857', 'CASE_NO_ID': 'test_fact_003', 'Description': '创建issue失败', 'Priority': 'P1', 'Component': 'DM', 'Automated': 'Yes', 'Steps': 'Step1', 'Headers': '{\\n  \\'Content-Type\\': \\'application/json;charset=UTF-8\\',\\n  \\'Cookie\\':\"\",\\n}\\n', 'Method': 'POST', 'Auth': '', 'Payload': '{\"projectId\":11330,\"title\":\"test_fail_v1\",\"priorityId\":1,\"assignee\":\"zhanghf\",\"dueDate\":1606665600000,\"requirements\":[{\"taskGroupId\":3,\"taskGroupCode\":\"concept_tree\",\"taskGroupName\":\"Concept Tree\",\"content\":\"12313\"}]}', 'URL': '/issue/create', 'Validate_Type': 'status_code', 'Expect': 200.0, 'Actual': ''}, {'row': 7, 'botActId': 'test302857', 'CASE_NO_ID': 'test_fact_003', 'Description': '查询issue失败后列表', 'Priority': 'P1', 'Component': 'DM', 'Automated': 'Yes', 'Steps': 'Step2', 'Headers': '{\\n  \\'Content-Type\\': \\'application/json;charset=UTF-8\\',\\n  \\'Cookie\\':\"\",\\n}\\n', 'Method': 'POST', 'Auth': '', 'Payload': '{\"projectId\":11330,\"typeId\":1,\"like\":\"\",\"priorityId\":[],\"assigneeName\":\"\",\"assignees\":[],\"creators\":[],\"statusIds\":[],\"orderBy\":\"\",\"orderType\":\"\",\"pageNum\":1,\"pageSize\":10}', 'URL': '/issue/list', 'Validate_Type': 'not in', 'Expect': \"title': 'test_fail_v1'\", 'Actual': ''}], 'botActId': 'test302857'}"}], "start": 1607502255834, "stop": 1607502256009, "uuid": "d704ac43-27fe-486b-9e00-8d91f084f8da", "historyId": "6d7b1ab85c69af23172788d73d9282b2", "testCaseId": "fbabcc0c9c11e4ecfbc092daf7d5aadf", "fullName": "tests.test_api.Testdata#test_start", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_api"}, {"name": "subSuite", "value": "Testdata"}, {"name": "host", "value": "wx0liucy"}, {"name": "thread", "value": "11508-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api"}]}