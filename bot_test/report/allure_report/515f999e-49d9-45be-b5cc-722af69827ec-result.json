{"name": "test_start[autotest8]", "status": "failed", "statusDetails": {"message": "AssertionError: assert False\n +  where False = assert_handle({'code': 500, 'data': 'system inner error', 'error': 'Internal Server Error', 'errors': None, ...}, 'success', 'in')", "trace": "self = <test_api.Testdata object at 0x05AE9890>\nautotest = {'botActId': 'test936439', 'file_name': 'scello-9106.xlsx', 'project_name': 'scello-9106', 'sheet_name': 'Sheet1', ...}\nwrite_book = <tools.ExcelHandle.ExcelHandle object at 0x05A6E210>\nenv_data = ('10.110.152.171', '9106')\n\n    def test_start(self,autotest,write_book,env_data):\n    \n        act_data = autotest['steps']\n        global global_data\n        for data in act_data:\n            row = data['row']\n            result = 'Pass'\n            actual_result = None\n            try:\n                response = RequestHandle(data,env_data,global_data,autotest['project_name']).get_response()\n                actual_result = response.json()\n                if jsonpath.jsonpath(actual_result,'$..botId'):\n                    global_data = jsonpath.jsonpath(actual_result,'$..botId')[0]\n>               assert assert_handle(actual_result, data['Expect'], data['Validate_Type'])\nE               AssertionError: assert False\nE                +  where False = assert_handle({'code': 500, 'data': 'system inner error', 'error': 'Internal Server Error', 'errors': None, ...}, 'success', 'in')\n\ntests\\test_api.py:31: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_api.Testdata object at 0x05AE9890>\nautotest = {'botActId': 'test936439', 'file_name': 'scello-9106.xlsx', 'project_name': 'scello-9106', 'sheet_name': 'Sheet1', ...}\nwrite_book = <tools.ExcelHandle.ExcelHandle object at 0x05A6E210>\nenv_data = ('10.110.152.171', '9106')\n\n    def test_start(self,autotest,write_book,env_data):\n    \n        act_data = autotest['steps']\n        global global_data\n        for data in act_data:\n            row = data['row']\n            result = 'Pass'\n            actual_result = None\n            try:\n                response = RequestHandle(data,env_data,global_data,autotest['project_name']).get_response()\n                actual_result = response.json()\n                if jsonpath.jsonpath(actual_result,'$..botId'):\n                    global_data = jsonpath.jsonpath(actual_result,'$..botId')[0]\n                assert assert_handle(actual_result, data['Expect'], data['Validate_Type'])\n            except Exception as e:\n                result = 'Fail'\n>               raise AssertionError(e)\nE               AssertionError: assert False\nE                +  where False = assert_handle({'code': 500, 'data': 'system inner error', 'error': 'Internal Server Error', 'errors': None, ...}, 'success', 'in')\n\ntests\\test_api.py:34: AssertionError"}, "parameters": [{"name": "autotest", "value": "{'project_name': 'scello-9106', 'file_name': 'scello-9106.xlsx', 'sheet_name': 'Sheet1', 'steps': [{'row': 9, 'botActId': 'test936439', 'CASE_NO_ID': 'test_fact_008', 'Description': '将spec数据录入到文件，存到数据平台', 'Priority': 'P1', 'Component': 'KGMS', 'Automated': 'Yes', 'Steps': 'Step1', 'Headers': '{\"Content-Type\": \"application/json\"}', 'Method': 'POST', 'Auth': '', 'Payload': '{\"botId\":1598844987}', 'URL': '/specmanager/spec/saveSpectoDataPlatform', 'Validate_Type': 'in', 'Expect': 'success', 'Actual': ''}], 'botActId': 'test936439'}"}], "start": 1607502254432, "stop": 1607502254481, "uuid": "dfcd329d-0fde-4a30-b306-35a5a9676610", "historyId": "fbe6e1a499ca35d9953ab39f8b37e899", "testCaseId": "fbabcc0c9c11e4ecfbc092daf7d5aadf", "fullName": "tests.test_api.Testdata#test_start", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_api"}, {"name": "subSuite", "value": "Testdata"}, {"name": "host", "value": "wx0liucy"}, {"name": "thread", "value": "11508-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api"}]}