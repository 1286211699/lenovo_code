{"name": "test_start[autotest8]", "status": "failed", "statusDetails": {"message": "AssertionError: 'NoneType' object has no attribute 'strip'", "trace": "self = <test_01.Testdata object at 0x05622870>\nautotest = {'Actual': '', 'Auth': '', 'Automated': 'Yes', 'CASE_NO_ID': 'test_fact_009', ...}\nwrite_book = <tools.ExcelHandle.ExcelHandle object at 0x049E5070>\n\n    def test_start(self,autotest,write_book):\n    \n        if autotest.get('row', None):\n            response  = RequestHandle(autotest).get_response()\n            actual_result = response.json()\n            row = autotest['row']\n            result = 'Pass'\n            try:\n                assert assert_handle(actual_result,autotest['Expect'],autotest['Validate_Type'])\n            except Exception as e:\n                result = 'Fail'\n                raise AssertionError(e)\n            finally:\n                write_book.write_back_result(row,str(actual_result),result)\n        else:\n            act_data = autotest['steps']\n            for autotest in act_data:\n                response = RequestHandle(autotest).get_response()\n                actual_result = response.json()\n    \n                row = autotest['row']\n                result = 'Pass'\n                try:\n>                   assert assert_handle(actual_result, autotest['Expect'], autotest['Validate_Type'])\n\ntests\\test_01.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nactual_result = {'code': '200', 'data': None, 'msg': 'success'}\nexpect_result = {'code': '200', 'data': None, 'msg': 'success'}\nValidate_Type = 'json'\n\n    def assert_handle(actual_result,expect_result,Validate_Type):\n        '''\n        :param actual_result: 真实数据\n        :param expect_result: 期望数据\n        :param Validate_Type: 对比的类型\n        :return: Ture or False\n        '''\n        if Validate_Type.lower() == 'json':\n    \n            try:\n                expect_result = demjson.decode(expect_result)\n            except:\n                expect_result = '{'+ expect_result +'}'\n                expect_result = demjson.decode(expect_result)\n            result = True\n            for key,value in expect_result.items():\n                data = jsonpath.jsonpath(actual_result,'$..'+ key)[0]\n>               if data.strip() == value.strip():\nE               AttributeError: 'NoneType' object has no attribute 'strip'\n\ntools\\AssertHandle.py:28: AttributeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_01.Testdata object at 0x05622870>\nautotest = {'Actual': '', 'Auth': '', 'Automated': 'Yes', 'CASE_NO_ID': 'test_fact_009', ...}\nwrite_book = <tools.ExcelHandle.ExcelHandle object at 0x049E5070>\n\n    def test_start(self,autotest,write_book):\n    \n        if autotest.get('row', None):\n            response  = RequestHandle(autotest).get_response()\n            actual_result = response.json()\n            row = autotest['row']\n            result = 'Pass'\n            try:\n                assert assert_handle(actual_result,autotest['Expect'],autotest['Validate_Type'])\n            except Exception as e:\n                result = 'Fail'\n                raise AssertionError(e)\n            finally:\n                write_book.write_back_result(row,str(actual_result),result)\n        else:\n            act_data = autotest['steps']\n            for autotest in act_data:\n                response = RequestHandle(autotest).get_response()\n                actual_result = response.json()\n    \n                row = autotest['row']\n                result = 'Pass'\n                try:\n                    assert assert_handle(actual_result, autotest['Expect'], autotest['Validate_Type'])\n                except Exception as e:\n                    result = 'Fail'\n>                   raise AssertionError(e)\nE                   AssertionError: 'NoneType' object has no attribute 'strip'\n\ntests\\test_01.py:42: AssertionError"}, "parameters": [{"name": "autotest", "value": "{'project_name': 'scello', 'file_name': 'scello.xlsx', 'sheet_name': 'Sheet1', 'steps': [{'row': 17, 'botActId': 'test601224', 'CASE_NO_ID': 'test_fact_009', 'Description': '获取资产话术列表', 'Priority': 'P1', 'Component': 'KGMS', 'Automated': 'Yes', 'Steps': 'Step1', 'Headers': '{\"Content-Type\": \"application/json\"}', 'Method': 'GET', 'Auth': '', 'Payload': '', 'URL': '/editor/show/assets/lena_de', 'Validate_Type': 'json', 'Expect': '{\\n    \"code\": \"200\",\\n    \"data\": null,\\n    \"msg\": \"success\"\\n}', 'Actual': ''}], 'botActId': 'test601224'}"}], "start": 1600225224210, "stop": 1600225224238, "uuid": "e4b7f8e8-4ddc-4faa-9516-c5b16042794d", "historyId": "d7521dfdd66ba2f2611e7b774779befe", "testCaseId": "68de03e34e38ed87d9781455db5f577a", "fullName": "tests.test_01.Testdata#test_start", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_01"}, {"name": "subSuite", "value": "Testdata"}, {"name": "host", "value": "wx0liucy"}, {"name": "thread", "value": "8016-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_01"}]}