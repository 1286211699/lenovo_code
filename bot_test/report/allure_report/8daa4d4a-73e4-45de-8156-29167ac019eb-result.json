{"name": "test_start[autotest3]", "status": "broken", "statusDetails": {"message": "requests.exceptions.InvalidURL: Failed to parse: http://10.110.152.175:9099http://localhost:9097/ext_service/query", "trace": "self = <PreparedRequest [POST]>\nurl = 'http://10.110.152.175:9099http://localhost:9097/ext_service/query'\nparams = OrderedDict()\n\n    def prepare_url(self, url, params):\n        \"\"\"Prepares the given HTTP URL.\"\"\"\n        #: Accept objects that have string representations.\n        #: We're unable to blindly call unicode/str functions\n        #: as this will include the bytestring indicator (b'')\n        #: on python 3.x.\n        #: https://github.com/requests/requests/pull/2238\n        if isinstance(url, bytes):\n            url = url.decode('utf8')\n        else:\n            url = unicode(url) if is_py2 else str(url)\n    \n        # Remove leading whitespaces from url\n        url = url.lstrip()\n    \n        # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n        # `data` etc to work around exceptions from `url_parse`, which\n        # handles RFC 3986 only.\n        if ':' in url and not url.lower().startswith('http'):\n            self.url = url\n            return\n    \n        # Support for unicode domain names and paths.\n        try:\n>           scheme, auth, host, port, path, query, fragment = parse_url(url)\n\nE:\\Python37\\lib\\site-packages\\requests\\models.py:379: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nurl = 'http://10.110.152.175:9099http://localhost:9097/ext_service/query'\n\n    def parse_url(url):\n        \"\"\"\n        Given a url, return a parsed :class:`.Url` namedtuple. Best-effort is\n        performed to parse incomplete urls. Fields not provided will be None.\n        This parser is RFC 3986 compliant.\n    \n        The parser logic and helper functions are based heavily on\n        work done in the ``rfc3986`` module.\n    \n        :param str url: URL to parse into a :class:`.Url` namedtuple.\n    \n        Partly backwards-compatible with :mod:`urlparse`.\n    \n        Example::\n    \n            >>> parse_url('http://google.com/mail/')\n            Url(scheme='http', host='google.com', port=None, path='/mail/', ...)\n            >>> parse_url('google.com:80')\n            Url(scheme=None, host='google.com', port=80, path=None, ...)\n            >>> parse_url('/foo?bar')\n            Url(scheme=None, host=None, port=None, path='/foo', query='bar', ...)\n        \"\"\"\n        if not url:\n            # Empty\n            return Url()\n    \n        source_url = url\n        if not SCHEME_RE.search(url):\n            url = \"//\" + url\n    \n        try:\n            scheme, authority, path, query, fragment = URI_RE.match(url).groups()\n            normalize_uri = scheme is None or scheme.lower() in NORMALIZABLE_SCHEMES\n    \n            if scheme:\n                scheme = scheme.lower()\n    \n            if authority:\n                auth, host, port = SUBAUTHORITY_RE.match(authority).groups()\n                if auth and normalize_uri:\n                    auth = _encode_invalid_chars(auth, USERINFO_CHARS)\n                if port == \"\":\n                    port = None\n            else:\n                auth, host, port = None, None, None\n    \n            if port is not None:\n                port = int(port)\n                if not (0 <= port <= 65535):\n                    raise LocationParseError(url)\n    \n            host = _normalize_host(host, scheme)\n    \n            if normalize_uri and path:\n                path = _remove_path_dot_segments(path)\n                path = _encode_invalid_chars(path, PATH_CHARS)\n            if normalize_uri and query:\n                query = _encode_invalid_chars(query, QUERY_CHARS)\n            if normalize_uri and fragment:\n                fragment = _encode_invalid_chars(fragment, FRAGMENT_CHARS)\n    \n        except (ValueError, AttributeError):\n>           return six.raise_from(LocationParseError(source_url), None)\n\nE:\\Python37\\lib\\site-packages\\urllib3\\util\\url.py:392: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nvalue = None, from_value = None\n\n>   ???\nE   urllib3.exceptions.LocationParseError: Failed to parse: http://10.110.152.175:9099http://localhost:9097/ext_service/query\n\n<string>:3: LocationParseError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_01.Testdata object at 0x049F28B0>\nautotest = {'Actual': '', 'Auth': '', 'Automated': 'Yes', 'CASE_NO_ID': 'test_api_004', ...}\nwrite_book = <tools.ExcelHandle.ExcelHandle object at 0x04A255F0>\n\n    def test_start(self,autotest,write_book):\n    \n        if autotest.get('row', None):\n            response  = RequestHandle(autotest).get_response()\n            actual_result = response.json()\n            row = autotest['row']\n            result = 'Pass'\n            try:\n                assert assert_handle(actual_result,autotest['Expect'],autotest['Validate_Type'])\n            except Exception as e:\n                result = 'Fail'\n                raise AssertionError(e)\n            finally:\n                write_book.write_back_result(row,str(actual_result),result)\n        else:\n            act_data = autotest['steps']\n            for autotest in act_data:\n>               response = RequestHandle(autotest).get_response()\n\ntests\\test_01.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntools\\RquestHandle.py:51: in get_response\n    response = requests.request(method, url, headers=headers, data=Payload,cookies = None)\nE:\\Python37\\lib\\site-packages\\requests\\api.py:60: in request\n    return session.request(method=method, url=url, **kwargs)\nE:\\Python37\\lib\\site-packages\\requests\\sessions.py:519: in request\n    prep = self.prepare_request(req)\nE:\\Python37\\lib\\site-packages\\requests\\sessions.py:462: in prepare_request\n    hooks=merge_hooks(request.hooks, self.hooks),\nE:\\Python37\\lib\\site-packages\\requests\\models.py:313: in prepare\n    self.prepare_url(url, params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <PreparedRequest [POST]>\nurl = 'http://10.110.152.175:9099http://localhost:9097/ext_service/query'\nparams = OrderedDict()\n\n    def prepare_url(self, url, params):\n        \"\"\"Prepares the given HTTP URL.\"\"\"\n        #: Accept objects that have string representations.\n        #: We're unable to blindly call unicode/str functions\n        #: as this will include the bytestring indicator (b'')\n        #: on python 3.x.\n        #: https://github.com/requests/requests/pull/2238\n        if isinstance(url, bytes):\n            url = url.decode('utf8')\n        else:\n            url = unicode(url) if is_py2 else str(url)\n    \n        # Remove leading whitespaces from url\n        url = url.lstrip()\n    \n        # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n        # `data` etc to work around exceptions from `url_parse`, which\n        # handles RFC 3986 only.\n        if ':' in url and not url.lower().startswith('http'):\n            self.url = url\n            return\n    \n        # Support for unicode domain names and paths.\n        try:\n            scheme, auth, host, port, path, query, fragment = parse_url(url)\n        except LocationParseError as e:\n>           raise InvalidURL(*e.args)\nE           requests.exceptions.InvalidURL: Failed to parse: http://10.110.152.175:9099http://localhost:9097/ext_service/query\n\nE:\\Python37\\lib\\site-packages\\requests\\models.py:381: InvalidURL"}, "parameters": [{"name": "autotest", "value": "{'project_name': 'api', 'file_name': 'api.xlsx', 'sheet_name': 'Sheet1', 'steps': [{'row': 4, 'botActId': 'test001854', 'CASE_NO_ID': 'test_api_004', 'Description': '时间查询', 'Priority': 'P1', 'Component': 'KGMS', 'Automated': 'Yes', 'Steps': 'Step1', 'Headers': '{\"Content-Type\": \"application/json\"}', 'Method': 'POST', 'Auth': '', 'Payload': '{\\n    \"serviceType\": \"rnt\",\\n    \"businessType\": \"queryRntTime\",\\n    \"params\": {\\n        \"geo\": \"BR\",\\n        \"country\": \"India\",\\n        \"project\": \"moli\",\\n        \"pcproduct\": \"think\"\\n    },\\n    \"timestamp\": 1575510765,\\n    \"requestId\": \"4cdbc040-657a-4847-b266-7e31d9e2c3d9\"\\n}', 'URL': 'http://localhost:9097/ext_service/query', 'Validate_Type': 'json', 'Expect': '{\"status\":200,\"info\":\"success\",\"requestId\":\"4cdbc040-657a-4847-b266-7e31d9e2c3d9\",\"data\":{\"rntServiceStatus\":\"\",\"todayMaxUnixTimeStamp\":1591844399000,\"timeZone\":\"GMT-3\",\"isOnline\":\"true\",\"message\":\"We\\'re sorry, our currently site is closed. Hours of operation are <span style=\\\\\"color: black;\\\\\"> <strong>9:00 AM</strong> to <strong>6:00 PM</strong> </span>, Monday to Friday (closed on Public Holidays). Thank you for using online chat support. You have contacted us outside supporting hours. Please contact us again during normal operating hours.\",\"nextStatusTime\":1591927140000,\"workTime\":{\"WEDNESDAY\":{\"EndTime\":1591840740000,\"StartTime\":1591754400000},\"MONDAY\":{\"EndTime\":1591667940000,\"StartTime\":1591581600000},\"THURSDAY\":{\"EndTime\":1591927140000,\"StartTime\":1591840800000},\"TUESDAY\":{\"EndTime\":1591754340000,\"StartTime\":1591668000000},\"FRIDAY\":{\"EndTime\":1592013540000,\"StartTime\":1591927200000},\"SATURDAY\":{\"EndTime\":1592099940000,\"StartTime\":1592013600000}}}}', 'Actual': ''}], 'botActId': 'test001854'}"}], "start": 1600225339069, "stop": 1600225339070, "uuid": "44903a0c-7da6-4229-bfc4-fc5b3f0b20d4", "historyId": "2ca70bffd92323e9543a76041c09f423", "testCaseId": "68de03e34e38ed87d9781455db5f577a", "fullName": "tests.test_01.Testdata#test_start", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_01"}, {"name": "subSuite", "value": "Testdata"}, {"name": "host", "value": "wx0liucy"}, {"name": "thread", "value": "8596-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_01"}]}