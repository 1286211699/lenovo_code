{"name": "test_start[autotest1]", "status": "failed", "statusDetails": {"message": "AssertionError: assert False\n +  where False = assert_handle({'code': 500, 'data': 'system inner error', 'error': 'Internal Server Error', 'errors': None, ...}, 'getSpecParents success', 'in')", "trace": "self = <test_api.Testdata object at 0x05150B90>\nautotest = {'Actual': '', 'Auth': '', 'Automated': 'Yes', 'CASE_NO_ID': 'test_fact_002', ...}\nwrite_book = <tools.ExcelHandle.ExcelHandle object at 0x0513E8D0>\nenv_data = ('10.110.152.171', '9100')\n\n    def test_start(self,autotest,write_book,env_data):\n        act_data = autotest['steps']\n        global global_data\n        for autotest in act_data:\n            row = autotest['row']\n            result = 'Pass'\n            actual_result = None\n            try:\n                response = RequestHandle(autotest,env_data,global_data).get_response()\n                actual_result = response.json()\n                # print(actual_result)\n                if jsonpath.jsonpath(actual_result,'$..botId'):\n                    global_data = jsonpath.jsonpath(actual_result,'$..botId')[0]\n>               assert assert_handle(actual_result, autotest['Expect'], autotest['Validate_Type'])\nE               AssertionError: assert False\nE                +  where False = assert_handle({'code': 500, 'data': 'system inner error', 'error': 'Internal Server Error', 'errors': None, ...}, 'getSpecParents success', 'in')\n\ntests\\test_api.py:32: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_api.Testdata object at 0x05150B90>\nautotest = {'Actual': '', 'Auth': '', 'Automated': 'Yes', 'CASE_NO_ID': 'test_fact_002', ...}\nwrite_book = <tools.ExcelHandle.ExcelHandle object at 0x0513E8D0>\nenv_data = ('10.110.152.171', '9100')\n\n    def test_start(self,autotest,write_book,env_data):\n        act_data = autotest['steps']\n        global global_data\n        for autotest in act_data:\n            row = autotest['row']\n            result = 'Pass'\n            actual_result = None\n            try:\n                response = RequestHandle(autotest,env_data,global_data).get_response()\n                actual_result = response.json()\n                # print(actual_result)\n                if jsonpath.jsonpath(actual_result,'$..botId'):\n                    global_data = jsonpath.jsonpath(actual_result,'$..botId')[0]\n                assert assert_handle(actual_result, autotest['Expect'], autotest['Validate_Type'])\n            except Exception as e:\n                result = 'Fail'\n                # log.critical(e)\n>               raise AssertionError(e)\nE               AssertionError: assert False\nE                +  where False = assert_handle({'code': 500, 'data': 'system inner error', 'error': 'Internal Server Error', 'errors': None, ...}, 'getSpecParents success', 'in')\n\ntests\\test_api.py:36: AssertionError"}, "parameters": [{"name": "autotest", "value": "{'project_name': 'scello-9100', 'file_name': 'scello-9100.xlsx', 'sheet_name': 'Sheet1', 'steps': [{'row': 2, 'botActId': 'test416996', 'CASE_NO_ID': 'test_fact_002', 'Description': '插入bot', 'Priority': 'P1', 'Component': 'KGMS', 'Automated': 'Yes', 'Steps': 'Step1', 'Headers': '{\"Content-Type\": \"application/json\"}', 'Method': 'POST', 'Auth': '', 'Payload': '{\\n\"botName\":\"jiangjun_test12345\",\\n\"designer\":\"jiangjun\",\\n\"planner\":\"jiangjun\",\\n\"channel\":[\"channel1\",\"channel2\"],\\n\"language\":[\"cn\"],\\n\"geos\":[{\"geo\": \"UK\", \"countrys\": []},{\"geo\": \"UK\", \"countrys\": []},{\"geo\": \"UK\", \"countrys\": []}],\\n\"businessEntity\":\"android\",\\n\"botVersion\":\"1.01.1\",\\n\"brand\":\"lenovo_pc\",\\n\"estimatedReleaseTime\":\"2020-06-24\"\\n}\\n', 'URL': '/botmanager/botinst/saveBot', 'Validate_Type': 'in', 'Expect': 'saveBot success', 'Actual': ''}, {'row': 3, 'botActId': 'test416996', 'CASE_NO_ID': 'test_fact_002', 'Description': '通过Bot的Id查询bot_spec的左侧栏\\n', 'Priority': 'P1', 'Component': 'KGMS', 'Automated': 'Yes', 'Steps': 'Step2', 'Headers': '{\"Content-Type\": \"application/json\"}', 'Method': 'POST', 'Auth': '', 'Payload': '{\\n\"specId\":1,\\n\"botId\":{botId},\\n\"edit\":1\\n}\\n', 'URL': '/botmanager/botinst/getSpecsByParentId', 'Validate_Type': 'in', 'Expect': 'getSpecParents success', 'Actual': ''}, {'row': 4, 'botActId': 'test416996', 'CASE_NO_ID': 'test_fact_003', 'Description': '删除BOT', 'Priority': 'P1', 'Component': 'KGMS', 'Automated': 'Yes', 'Steps': 'Step3', 'Headers': '{\"Content-Type\": \"application/json\"}', 'Method': 'POST', 'Auth': '', 'Payload': '{\"botId\":{bodId}', 'URL': '/botmanager/botinst/destroyBot', 'Validate_Type': 'in', 'Expect': 'destroyBot success', 'Actual': ''}], 'botActId': 'test416996'}"}], "start": 1604297774993, "stop": 1604297775247, "uuid": "afeb386c-d5d5-47ca-8f71-8002cd3364e3", "historyId": "c8152495cb1f17a22fdc78500ba9a736", "testCaseId": "fbabcc0c9c11e4ecfbc092daf7d5aadf", "fullName": "tests.test_api.Testdata#test_start", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_api"}, {"name": "subSuite", "value": "Testdata"}, {"name": "host", "value": "wx0liucy"}, {"name": "thread", "value": "6428-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api"}]}