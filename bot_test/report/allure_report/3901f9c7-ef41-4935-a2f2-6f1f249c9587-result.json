{"name": "test_start[autotest7]", "status": "broken", "statusDetails": {"message": "Exception: String longer than 32767 characters", "trace": "self = <test_01.Testdata object at 0x04ED6830>\nautotest = {'': 'Pass', 'Actual': \"{'code': '200', 'data': [{'botActId': 'test3919', 'categoryName': 'Asking Information', 'descr...e': 1, 'scriptValue': 'test', 'usage': 0, 'userAccount': ''}], 'msg': 'success'}\", 'Auth': '', 'Automated': 'Yes', ...}\nwrite_book = <tools.ExcelHandle.ExcelHandle object at 0x04A5ABD0>\n\n    def test_start(self,autotest,write_book):\n    \n        if autotest.get('row', None):\n            response  = RequestHandle(autotest).get_response()\n            actual_result = response.json()\n            row = autotest['row']\n            result = 'Pass'\n            try:\n                assert assert_handle(actual_result,autotest['Expect'],autotest['Validate_Type'])\n            except Exception as e:\n                result = 'Fail'\n                raise AssertionError(e)\n            finally:\n                write_book.write_back_result(row,str(actual_result),result)\n        else:\n            act_data = autotest['steps']\n    \n            for autotest in act_data:\n    \n                response = RequestHandle(autotest).get_response()\n                actual_result = response.json()\n                row = autotest['row']\n                result = 'Pass'\n                try:\n                    assert assert_handle(actual_result, autotest['Expect'], autotest['Validate_Type'])\n                except Exception as e:\n                    result = 'Fail'\n                    raise AssertionError(e)\n                finally:\n>                   write_book.write_back_result(row, str(actual_result), result)\n\ntests\\test_01.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntools\\ExcelHandle.py:93: in write_back_result\n    self.save()\ntools\\ExcelHandle.py:97: in save\n    self.write_book.save(result_file + self.file_name.replace('.xlsx', '.xls'))\nE:\\Python37\\lib\\site-packages\\xlwt\\Workbook.py:710: in save\n    doc.save(filename_or_stream, self.get_biff_data())\nE:\\Python37\\lib\\site-packages\\xlwt\\Workbook.py:674: in get_biff_data\n    shared_str_table   = self.__sst_rec()\nE:\\Python37\\lib\\site-packages\\xlwt\\Workbook.py:636: in __sst_rec\n    return self.__sst.get_biff_record()\nE:\\Python37\\lib\\site-packages\\xlwt\\BIFFRecords.py:77: in get_biff_record\n    self._add_to_sst(s)\nE:\\Python37\\lib\\site-packages\\xlwt\\BIFFRecords.py:92: in _add_to_sst\n    u_str = upack2(s, self.encoding)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = \"{'code': '200', 'data': [{'botActId': 'test1345', 'categoryName': 'Asking Information', 'description': '', 'id': 1210... {'language': ['English']}, 'scriptType': 1, 'scriptValue': 'test', 'usage': 0, 'userAccount': ''}], 'msg': 'success'}\"\nencoding = 'ascii'\n\n    def upack2(s, encoding='ascii'):\n        # If not unicode, make it so.\n        if isinstance(s, unicode_type):\n            us = s\n        else:\n            us = unicode(s, encoding)\n        # Limit is based on number of content characters\n        # (not on number of bytes in packed result)\n        len_us = len(us)\n        if len_us > 32767:\n>           raise Exception('String longer than 32767 characters')\nE           Exception: String longer than 32767 characters\n\nE:\\Python37\\lib\\site-packages\\xlwt\\UnicodeUtils.py:55: Exception"}, "parameters": [{"name": "autotest", "value": "{'project_name': 'scello', 'file_name': 'scello.xlsx', 'sheet_name': 'Sheet1', 'steps': [{'row': 16, 'botActId': 'test075844', 'CASE_NO_ID': 'test_fact_008', 'Description': 'reload版本话术库', 'Priority': 'P1', 'Component': 'KGMS', 'Automated': 'Yes', 'Steps': 'Step1', 'Headers': '{\"Content-Type\": \"application/json\"}', 'Method': 'GET', 'Auth': '', 'Payload': '', 'URL': '/editor/reload/version/lena_de_new?resourceId=0x297', 'Validate_Type': 'json', 'Expect': '{\\n    \"code\": \"200\",\\n    \"data\": null,\\n    \"msg\": \"success\"\\n}', 'Actual': '{\\'code\\': \\'200\\', \\'data\\': [{\\'botActId\\': \\'test3919\\', \\'categoryName\\': \\'Asking Information\\', \\'description\\': \\'\\', \\'id\\': 121038, \\'projectId\\': 0, \\'remark\\': \\'\\', \\'scriptExample\\': \\'{\"question\":\"how are you?\",\"answer\":\" I am fine\",\"imgUrl\":[]}\\', \\'scriptFeature\\': {\\'language\\': [\\'English\\']}, \\'scriptType\\': 1, \\'scriptValue\\': \\'test\\', \\'usage\\': 0, \\'userAccount\\': \\'\\'}], \\'msg\\': \\'success\\'}', '': 'Pass'}], 'botActId': 'test075844'}"}], "start": 1599813440519, "stop": 1599813440660, "uuid": "867fca56-ae66-4373-a804-051c3057e784", "historyId": "4588aaa977537b0cc8801e710353d178", "testCaseId": "68de03e34e38ed87d9781455db5f577a", "fullName": "tests.test_01.Testdata#test_start", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_01"}, {"name": "subSuite", "value": "Testdata"}, {"name": "host", "value": "wx0liucy"}, {"name": "thread", "value": "2876-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_01"}]}